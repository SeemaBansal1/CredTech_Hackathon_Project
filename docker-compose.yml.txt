# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: credscope
      POSTGRES_USER: credscope_user
      POSTGRES_PASSWORD: credscope_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U credscope_user -d credscope"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:6-alpine
    command: redis-server --requirepass credscope_redis_pass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRICS_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ClickHouse (Time-series database)
  clickhouse:
    image: yandex/clickhouse-server:21.8
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./backend/database/clickhouse_init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      CLICKHOUSE_DB: credscope_ts
      CLICKHOUSE_USER: credscope_user
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1

  # FastAPI Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENV=development
  # ML Model Training Service
  ml_trainer:
    build:
      context: ./backend
      dockerfile: Dockerfile.ml
    environment:
      - DATABASE_URL=postgresql://credscope_user:credscope_pass@postgres:5432/credscope
      - REDIS_URL=redis://:credscope_redis_pass@redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MODEL_TRAINING_SCHEDULE=0 2 * * *  # Daily at 2 AM
    depends_on:
      - postgres
      - redis
      - kafka
    volumes:
      - ./backend:/app
      - ml_models:/app/models
    command: python -m models.training_scheduler

  # Data Ingestion Service
  data_ingestion:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://credscope_user:credscope_pass@postgres:5432/credscope
      - REDIS_URL=redis://:credscope_redis_pass@redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - YAHOO_FINANCE_API_KEY=${YAHOO_FINANCE_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - FRED_API_KEY=${FRED_API_KEY}
    depends_on:
      - postgres
      - redis
      - kafka
    volumes:
      - ./backend:/app
    command: python -m data_pipeline.ingestion_service

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - frontend
    restart: unless-stopped

  # Grafana Monitoring
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # ElasticSearch for Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

  # Jupyter Notebooks for Analysis
  jupyter:
    image: jupyter/scipy-notebook:latest
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=credscope123
    volumes:
      - ./notebooks:/home/jovyan/work
      - jupyter_data:/home/jovyan
    depends_on:
      - postgres

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  clickhouse_data:
  ml_models:
  grafana_data:
  prometheus_data:
  elasticsearch_data:
  jupyter_data:

networks:
  default:
    name: credscope_network432/credscope
      - REDIS_URL=redis://:credscope_redis_pass@redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - CLICKHOUSE_URL=http://clickhouse:8123
      - DEBUG=true
      - SECRET_KEY=your-secret-key-here
      - CORS_ORIGINS=["http://localhost:3000"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ml_models:/app/models
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_ENV=development
    depends_on:
      - api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start

  # ML Model Training Service
  ml_trainer:
    build:
      context: ./backend
      dockerfile: Dockerfile.ml
    environment:
      - DATABASE_URL=postgresql://credscope_user:credscope_pass@postgres:5